diff --git a/node_modules/wc-compiler/src/jsx-loader.js b/node_modules/wc-compiler/src/jsx-loader.js
index 53297cc..843e3e6 100644
--- a/node_modules/wc-compiler/src/jsx-loader.js
+++ b/node_modules/wc-compiler/src/jsx-loader.js
@@ -8,6 +8,7 @@ import jsx from '@projectevergreen/acorn-jsx-esm';
 import { parse, parseFragment, serialize } from 'parse5';
 // Need an acorn plugin for now - https://github.com/ProjectEvergreen/greenwood/issues/1218
 import { importAttributes } from 'acorn-import-attributes';
+import { transform } from 'sucrase';
 
 const jsxRegex = /\.(jsx)$/;
 
@@ -97,7 +98,7 @@ function parseJsxElement(element, moduleContents = '') {
                 if (expression.property.type === 'Identifier') {
                   // we leave markers for `this` so we can replace it later while also NOT accidentally replacing
                   // legitimate uses of this that might be actual content / markup of the custom element
-                  string += ` ${name}="__this__.${expression.property.name}()"`;
+                  string += ` ${name}='__this__.${expression.property.name}()'`;
                 }
               }
             }
@@ -109,7 +110,7 @@ function parseJsxElement(element, moduleContents = '') {
             if (expression.type === 'ArrowFunctionExpression') {
               if (expression.body && expression.body.type === 'CallExpression') {
                 const { start, end } = expression;
-                string += ` ${name}="${moduleContents.slice(start, end).replace(/this./g, '__this__.').replace('() => ', '')}"`;
+                string += ` ${name}='${moduleContents.slice(start, end).replace(/this./g, '__this__.').replace('() => ', '')}'`;
               }
             }
 
@@ -119,7 +120,7 @@ function parseJsxElement(element, moduleContents = '') {
               if (left.object.type === 'ThisExpression') {
                 if (left.property.type === 'Identifier') {
                   // very naive (fine grained?) reactivity
-                  string += ` ${name}="__this__.${left.property.name}${expression.operator}${right.raw}; __this__.render();"`;
+                  string += ` ${name}='__this__.${left.property.name}${expression.operator}${right.raw}; __this__.render();'`;
                 }
               }
             }
@@ -129,8 +130,8 @@ function parseJsxElement(element, moduleContents = '') {
           // Can all these be parsed using one function>
           if (attribute.value) {
             if (attribute.value.type === 'Literal') {
-              // xxx="yyy" >
-              string += ` ${name}="${attribute.value.value}"`;
+              // xxx='yyy' >
+              string += ` ${name}='${attribute.value.value}'`;
             } else if (attribute.value.type === 'JSXExpressionContainer') {
               // xxx={allTodos.length} >
               const { value } = attribute;
@@ -232,13 +233,17 @@ function findThisReferences(context, statement) {
 
 export function parseJsx(moduleURL) {
   const moduleContents = fs.readFileSync(moduleURL, 'utf-8');
+  const result = transform(moduleContents, {
+    transforms: ['typescript', 'jsx'],
+    jsxRuntime: 'preserve'
+  });
   // would be nice if we could do this instead, so we could know ahead of time
   // const { inferredObservability } = await import(moduleURL);
   // however, this requires making parseJsx async, but WCC acorn walking is done sync
   const hasOwnObservedAttributes = undefined;
   let inferredObservability = false;
   let observedAttributes = [];
-  let tree = acorn.Parser.extend(jsx(), importAttributes).parse(moduleContents, {
+  let tree = acorn.Parser.extend(jsx(), importAttributes).parse(result.code, {
     ecmaVersion: 'latest',
     sourceType: 'module'
   });
diff --git a/node_modules/wc-compiler/src/wcc.js b/node_modules/wc-compiler/src/wcc.js
index 1247f3b..35884d4 100644
--- a/node_modules/wc-compiler/src/wcc.js
+++ b/node_modules/wc-compiler/src/wcc.js
@@ -9,6 +9,7 @@ import { getParser, parseJsx } from './jsx-loader.js';
 import { parse, parseFragment, serialize } from 'parse5';
 // Need an acorn plugin for now - https://github.com/ProjectEvergreen/greenwood/issues/1218
 import { importAttributes } from 'acorn-import-attributes';
+import { transform } from 'sucrase';
 import fs from 'fs';
 
 function getParse(html) {
@@ -61,6 +62,10 @@ async function renderComponentRoots(tree, definitions) {
 
 function registerDependencies(moduleURL, definitions, depth = 0) {
   const moduleContents = fs.readFileSync(moduleURL, 'utf-8');
+  const result = transform(moduleContents, {
+    transforms: ['typescript', 'jsx'],
+    jsxRuntime: 'preserve'
+  });
   const nextDepth = depth += 1;
   const customParser = getParser(moduleURL);
   const parser = customParser ? customParser.parser : acorn.Parser;
@@ -68,7 +73,7 @@ function registerDependencies(moduleURL, definitions, depth = 0) {
     ...walk.base
   };
 
-  walk.simple(parser.extend(importAttributes).parse(moduleContents, {
+  walk.simple(parser.extend(importAttributes).parse(result.code, {
     ecmaVersion: 'latest',
     sourceType: 'module'
   }), {
@@ -78,7 +83,8 @@ function registerDependencies(moduleURL, definitions, depth = 0) {
       const extension = specifier.split('.').pop();
 
       // TODO would like to decouple .jsx from the core, ideally
-      if (!isBareSpecifier && ['js', 'jsx'].includes(extension)) {
+      // https://github.com/ProjectEvergreen/wcc/issues/122
+      if (!isBareSpecifier && ['js', 'jsx', 'ts'].includes(extension)) {
         const dependencyModuleURL = new URL(node.source.value, moduleURL);
 
         registerDependencies(dependencyModuleURL, definitions, nextDepth);
@@ -107,6 +113,10 @@ function registerDependencies(moduleURL, definitions, depth = 0) {
 
 async function getTagName(moduleURL) {
   const moduleContents = await fs.promises.readFile(moduleURL, 'utf-8');
+  const result = transform(moduleContents, {
+    transforms: ['typescript', 'jsx'],
+    jsxRuntime: 'preserve'
+  });
   const customParser = getParser(moduleURL);
   const parser = customParser ? customParser.parser : acorn.Parser;
   const config = customParser ? customParser.config : {
@@ -114,7 +124,7 @@ async function getTagName(moduleURL) {
   };
   let tagName;
 
-  walk.simple(parser.extend(importAttributes).parse(moduleContents, {
+  walk.simple(parser.extend(importAttributes).parse(result.code, {
     ecmaVersion: 'latest',
     sourceType: 'module'
   }), {
